// static/js/tree/controls.js
import { toggleFullscreen, exportPNG, exportSVG, debounce, centerTree, searchNode } from './utils.js';
//import { searchNode } from './core.js'; // si searchNode y est d√©fini

/**
 * Attache tous les contr√¥les UI de l‚Äôarbre g√©n√©alogique.
 * @param {Object} params - Param√®tres n√©cessaires.
 * @param {d3.Selection} params.container - Conteneur D3 du SVG principal.
 * @param {d3.Selection} params.svgRoot - Groupe `<g>` D3 contenant l‚Äôarbre.
 * @param {HTMLElement} params.svgNode - √âl√©ment DOM <svg>.
 * @param {Object} params.root - Donn√©e racine D3 (utilis√©e dans update()).
 * @param {Function} [params.update] - Fonction d‚Äôupdate D3 facultative.
 */
export function setupTreeControls({ container, svgRoot, svgNode, root, update }) {
    if (!svgNode) {
        console.error("‚ùå Aucun SVG trouv√© pour les actions");
        return;
    }

    const parentElement = svgNode.parentElement;

    // üîò Centrage
    d3.select("#centerBtn").on("click", () => {
        centerTree(svgRoot, parentElement);
    });

    // üì§ Export PNG
    d3.select("#pngBtn").on("click", () => {
        exportPNG(svgNode);
    });

    // üì§ Export SVG
    d3.select("#svgBtn").on("click", () => {
        exportSVG(svgNode);
    });

    // ‚õ∂ Plein √©cran
    d3.select("#fullscreenBtn").on("click", () => {
        toggleFullscreen(container.node());
    });

    // üîç Recherche (D3)
    d3.select("#treeSearch").on("input", function () {
        searchNode(this.value, svgRoot);
    });

    // ‚Üª Mise √† jour initiale
    if (typeof update === 'function') {
        update(root);
    }

    // üìç Centrage initial
    setTimeout(() => {
        centerTree(svgRoot, parentElement);
    }, 500);
}

/**
 * Recherche g√©n√©rique via DOM (alternative simple sans D3).
 * Utilis√©e si les n≈ìuds ont `.node` et `textContent`.
 */
export function setupDOMSearchHighlight() {
    const searchInput = document.getElementById('tree-search');
    if (!searchInput) return;

    searchInput.addEventListener('input', debounce(() => {
        const query = searchInput.value.trim().toLowerCase();
        document.querySelectorAll('#tree-container .node').forEach(node => {
            const text = node.textContent.toLowerCase();
            node.classList.remove("node--highlight");
            if (query && text.includes(query)) {
                node.classList.add("node--highlight");
            }
        });
    }, 300));
}
